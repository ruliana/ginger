package ginger;

import ginger.Seq.Pair;

import java.util.Arrays;
import java.util.Collection;
import java.util.Deque;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;

public class Seq<T> implements List<T>, Deque<T> {

    private LinkedList<T> objects;

    public static <T> Seq<T> s(T... objects) {
        return new Seq<T>(objects);
    }

    public Seq() {
        this.objects = new LinkedList<T>();
    }

    public Seq(Collection<T> objects) {
        this.objects = new LinkedList<T>(objects);
    }

    public Seq(T... objects) {
        this(asList(objects));
    }

    /*
     * We can't create a simple list if we receive a "null" parameter. Instead
     * of an array with a "null" element, it passes the "null" itself (dumb!),
     * so we have to check that and manually create the list.
     * 
     * Also, if you pass "null" as and argument to "LinkedList" constructor, it
     * throws a NullPointerException :p
     */
    private static <E> List<E> asList(E... objects) {
        if (objects == null) {
            LinkedList<E> result = new LinkedList<E>();
            result.add(null);
            return result;
        } else {
            return Arrays.asList(objects);
        }
    }

    public String join() {
        return join(", ");
    }

    public String join(CharSequence separator) {
        return join(separator, separator);
    }

    public String join(CharSequence separator, CharSequence lastElementSeparator) {
        if (objects.isEmpty()) return "";
        if (objects.size() == 1) return String.valueOf(objects.getFirst());

        StringBuilder result = new StringBuilder();

        // First Element
        result.append(String.valueOf(objects.getFirst()));

        // Elements in the middle
        for (T element : objects.subList(1, objects.size() - 1)) {
            result.append(separator);
            result.append(String.valueOf(element));
        }

        // Last Element
        result.append(lastElementSeparator);
        result.append(String.valueOf(objects.getLast()));

        return result.toString();
    }

    public Seq<T> removeNullsAndBlanks() {
        LinkedList<T> result = new LinkedList<T>();
        for (T element : objects) {
            if (element == null) continue;
            if (element.toString().trim().equals("")) continue;

            result.add(element);
        }
        objects = result;
        return this;
    }
    
    /**
     * Like {@link #add(Object)}, but can be chained.
     */
    public Seq<T> append(T object) {
        objects.add(object);
        return this;
    }

    /**
     * Like {@link #addFirst(Object)}, but can be chained
     */
    public Seq<T> prepend(T object) {
        objects.addFirst(object);
        return this;
    }

    public <V> Seq<Pair<T, V>> combinedWith(Seq<V> other) {
        
        return null;
    }


    // List and Deque Interfaces
    // Simple delegations generated by Eclipse (thank you, Eclipse!!!)

    public void add(int index, T element) {
        objects.add(index, element);
    }

    public boolean add(T e) {
        return objects.add(e);
    }

    public boolean addAll(Collection<? extends T> c) {
        return objects.addAll(c);
    }

    public boolean addAll(int index, Collection<? extends T> c) {
        return objects.addAll(index, c);
    }

    public void addFirst(T e) {
        objects.addFirst(e);
    }

    public void addLast(T e) {
        objects.addLast(e);
    }

    public void clear() {
        objects.clear();
    }

    public Object clone() {
        return objects.clone();
    }

    public boolean contains(Object o) {
        return objects.contains(o);
    }

    public boolean containsAll(Collection<?> c) {
        return objects.containsAll(c);
    }

    public Iterator<T> descendingIterator() {
        return objects.descendingIterator();
    }

    public T element() {
        return objects.element();
    }

    public boolean equals(Object o) {
        return objects.equals(o);
    }

    public T get(int index) {
        return objects.get(index);
    }

    public T getFirst() {
        return objects.getFirst();
    }

    public T getLast() {
        return objects.getLast();
    }

    public int hashCode() {
        return objects.hashCode();
    }

    public int indexOf(Object o) {
        return objects.indexOf(o);
    }

    public boolean isEmpty() {
        return objects.isEmpty();
    }

    public Iterator<T> iterator() {
        return objects.iterator();
    }

    public int lastIndexOf(Object o) {
        return objects.lastIndexOf(o);
    }

    public ListIterator<T> listIterator() {
        return objects.listIterator();
    }

    public ListIterator<T> listIterator(int index) {
        return objects.listIterator(index);
    }

    public boolean offer(T e) {
        return objects.offer(e);
    }

    public boolean offerFirst(T e) {
        return objects.offerFirst(e);
    }

    public boolean offerLast(T e) {
        return objects.offerLast(e);
    }

    public T peek() {
        return objects.peek();
    }

    public T peekFirst() {
        return objects.peekFirst();
    }

    public T peekLast() {
        return objects.peekLast();
    }

    public T poll() {
        return objects.poll();
    }

    public T pollFirst() {
        return objects.pollFirst();
    }

    public T pollLast() {
        return objects.pollLast();
    }

    public T pop() {
        return objects.pop();
    }

    public void push(T e) {
        objects.push(e);
    }

    public T remove() {
        return objects.remove();
    }

    public T remove(int index) {
        return objects.remove(index);
    }

    public boolean remove(Object o) {
        return objects.remove(o);
    }

    public boolean removeAll(Collection<?> c) {
        return objects.removeAll(c);
    }

    public T removeFirst() {
        return objects.removeFirst();
    }

    public boolean removeFirstOccurrence(Object o) {
        return objects.removeFirstOccurrence(o);
    }

    public T removeLast() {
        return objects.removeLast();
    }

    public boolean removeLastOccurrence(Object o) {
        return objects.removeLastOccurrence(o);
    }

    public boolean retainAll(Collection<?> c) {
        return objects.retainAll(c);
    }

    public T set(int index, T element) {
        return objects.set(index, element);
    }

    public int size() {
        return objects.size();
    }

    public List<T> subList(int fromIndex, int toIndex) {
        return objects.subList(fromIndex, toIndex);
    }

    public Object[] toArray() {
        return objects.toArray();
    }

    public <E> E[] toArray(E[] a) {
        return objects.toArray(a);
    }

    public String toString() {
        return objects.toString();
    }
    
    // Helper classes
    
    /**
     * Basically a tuple with 2 elements.
     */
    public static class Pair<A, B> {
        private A first;
        private B second;
        
        public static <X, Y> Pair<X, Y> p(X first, Y second) {
            return new Pair<X, Y>(first, second);
        }
        
        public Pair(A first, B second) {
            this.first = first;
            this.second = second;
        }
        
        public A getFirst() {
            return first;
        }
        
        public B getSecond() {
            return second;
        }
        
        @Override
        public boolean equals(Object other) {
            if (other == null) return false;
            if (!(other instanceof Pair)) return false;
            Pair<?, ?> otherPair = (Pair<?, ?>) other;
            return first.equals(otherPair.getFirst()) && second.equals(otherPair.getSecond());
        }
        
        @Override
        public String toString() {
            return "(" + String.valueOf(first) + ", " + String.valueOf(second) + ")";
        }
    }
 }
